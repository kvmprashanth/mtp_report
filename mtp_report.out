\BOOKMARK [0][-]{chapter.1}{Introduction}{}% 1
\BOOKMARK [1][-]{section.1.1}{Memory management in clouds}{chapter.1}% 2
\BOOKMARK [2][-]{subsection.1.1.1}{Issues in native container environment}{section.1.1}% 3
\BOOKMARK [2][-]{subsection.1.1.2}{Amplification of issues in derivative cloud environment}{section.1.1}% 4
\BOOKMARK [1][-]{section.1.2}{Caching in the cloud}{chapter.1}% 5
\BOOKMARK [2][-]{subsection.1.2.1}{Drawbacks of caching in native \(VM\) cloud setups}{section.1.2}% 6
\BOOKMARK [2][-]{subsection.1.2.2}{Hypervisor managed caching}{section.1.2}% 7
\BOOKMARK [2][-]{subsection.1.2.3}{Issues of caching frameworks in derivative clouds}{section.1.2}% 8
\BOOKMARK [2][-]{subsection.1.2.4}{Application cache sensitivity is unaccounted}{section.1.2}% 9
\BOOKMARK [1][-]{section.1.3}{Problem description}{chapter.1}% 10
\BOOKMARK [2][-]{subsection.1.3.1}{Phase-1}{section.1.3}% 11
\BOOKMARK [2][-]{subsection.1.3.2}{Phase-2}{section.1.3}% 12
\BOOKMARK [0][-]{chapter.2}{Background}{}% 13
\BOOKMARK [1][-]{section.2.1}{Memory management between processes in Linux}{chapter.2}% 14
\BOOKMARK [2][-]{subsection.2.1.1}{Memory pages used by a process}{section.2.1}% 15
\BOOKMARK [2][-]{subsection.2.1.2}{Memory allocation}{section.2.1}% 16
\BOOKMARK [2][-]{subsection.2.1.3}{Memory reclamation without container support}{section.2.1}% 17
\BOOKMARK [1][-]{section.2.2}{Containers}{chapter.2}% 18
\BOOKMARK [2][-]{subsection.2.2.1}{Control groups}{section.2.2}% 19
\BOOKMARK [1][-]{section.2.3}{Double decker: Second chance cache for derivataive clouds}{chapter.2}% 20
\BOOKMARK [0][-]{chapter.3}{Related work}{}% 21
\BOOKMARK [1][-]{section.3.1}{Memory management}{chapter.3}% 22
\BOOKMARK [1][-]{section.3.2}{Caching}{chapter.3}% 23
\BOOKMARK [0][-]{chapter.4}{Differentiated memory management controller for containers}{}% 24
\BOOKMARK [1][-]{section.4.1}{Drawbacks of existing memory management for containers}{chapter.4}% 25
\BOOKMARK [2][-]{subsection.4.1.1}{Experimental setup}{section.4.1}% 26
\BOOKMARK [2][-]{subsection.4.1.2}{Issues in native environment}{section.4.1}% 27
\BOOKMARK [2][-]{subsection.4.1.3}{Amplification of issue in derivative clouds}{section.4.1}% 28
\BOOKMARK [2][-]{subsection.4.1.4}{Key Implications}{section.4.1}% 29
\BOOKMARK [1][-]{section.4.2}{Requirements for a new memory management controller}{chapter.4}% 30
\BOOKMARK [1][-]{section.4.3}{Proposed memory management controller}{chapter.4}% 31
\BOOKMARK [2][-]{subsection.4.3.1}{Controller logic}{section.4.3}% 32
\BOOKMARK [2][-]{subsection.4.3.2}{Policies supported by our controller}{section.4.3}% 33
\BOOKMARK [1][-]{section.4.4}{Modifications made to Linux memory Cgroup}{chapter.4}% 34
\BOOKMARK [2][-]{subsection.4.4.1}{Per container configurable weights}{section.4.4}% 35
\BOOKMARK [2][-]{subsection.4.4.2}{Flexible reclamation size}{section.4.4}% 36
\BOOKMARK [2][-]{subsection.4.4.3}{Deterministic reclamation}{section.4.4}% 37
\BOOKMARK [1][-]{section.4.5}{Empirical evaluation of our controller}{chapter.4}% 38
\BOOKMARK [2][-]{subsection.4.5.1}{Effectiveness of our controller}{section.4.5}% 39
\BOOKMARK [2][-]{subsection.4.5.2}{Differential QOS containers}{section.4.5}% 40
\BOOKMARK [2][-]{subsection.4.5.3}{Impact of reclamation chunk size}{section.4.5}% 41
\BOOKMARK [0][-]{chapter.5}{Double decker - Memory management framework for derivative clouds}{}% 42
\BOOKMARK [1][-]{section.5.1}{Application cache sensitivity}{chapter.5}% 43
\BOOKMARK [2][-]{subsection.5.1.1}{Provisioning of caches at different levels based on application sensitivity}{section.5.1}% 44
\BOOKMARK [2][-]{subsection.5.1.2}{Inability of cache partitioning framework to support anonymous memory applications}{section.5.1}% 45
\BOOKMARK [1][-]{section.5.2}{Rethink of existing design}{chapter.5}% 46
\BOOKMARK [2][-]{subsection.5.2.1}{Decentralized memory management framework}{section.5.2}% 47
\BOOKMARK [2][-]{subsection.5.2.2}{Hybrid cache}{section.5.2}% 48
\BOOKMARK [1][-]{section.5.3}{Implementation details}{chapter.5}% 49
\BOOKMARK [2][-]{subsection.5.3.1}{Existing implementation status}{section.5.3}% 50
\BOOKMARK [2][-]{subsection.5.3.2}{Hybrid cache}{section.5.3}% 51
\BOOKMARK [1][-]{section.5.4}{Correctness of implementation}{chapter.5}% 52
\BOOKMARK [2][-]{subsection.5.4.1}{Experimental setup}{section.5.4}% 53
\BOOKMARK [2][-]{subsection.5.4.2}{Arithematic validation of stats}{section.5.4}% 54
\BOOKMARK [2][-]{subsection.5.4.3}{Movement of objects between both levels of cache}{section.5.4}% 55
\BOOKMARK [1][-]{section.5.5}{Evaluation of Double Decker}{chapter.5}% 56
\BOOKMARK [2][-]{subsection.5.5.1}{Experimental setup}{section.5.5}% 57
\BOOKMARK [2][-]{subsection.5.5.2}{Performance comparion with old implementation}{section.5.5}% 58
\BOOKMARK [2][-]{subsection.5.5.3}{Provisioning for anonymous and file backed workloads}{section.5.5}% 59
\BOOKMARK [2][-]{subsection.5.5.4}{Hybrid cache provisioning}{section.5.5}% 60
\BOOKMARK [0][-]{chapter.6}{Conclusions}{}% 61
\BOOKMARK [0][-]{chapter.7}{Future Extensions}{}% 62
